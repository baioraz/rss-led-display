package lt.avr.movingmessage.cable;


import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.PointerByReference;

/**
 * 

#define AVR309DLL    "AVR309.dll";
  //return values from AVR309DLL functions:
#define NO_ERROR    0;
#define DEVICE_NOT_PRESENT    1;
#define NO_DATA_AVAILABLE    2;
#define INVALID_BAUDRATE    3;
#define OVERRUN_ERROR    4;
#define INVALID_DATABITS    5;
#define INVALID_PARITY    6;
#define INVALID_STOPBITS    7;

int __stdcall DoGetInfraCode(uchar * TimeCodeDiagram, int DummyInt, int * DiagramLength);
int __stdcall DoSetDataPortDirection(uchar DirectionByte);
int __stdcall DoGetDataPortDirection(uchar * DataDirectionByte);
int __stdcall DoSetOutDataPort(uchar DataOutByte);
int __stdcall DoGetOutDataPort(uchar * DataOutByte);
int __stdcall DoGetInDataPort(uchar * DataInByte);

int __stdcall DoSetDataPortDirections(uchar DirectionByteB, uchar DirectionByte, uchar DirectionByte, uchar UsedPorts);
int __stdcall DoGetDataPortDirections(uchar * DataDirectionByteB, uchar * DataDirectionByteC, uchar * DataDirectionByteD, uchar * UsedPorts);
int __stdcall DoSetOutDataPorts(uchar DataOutByteB, uchar DataOutByteC, uchar DataOutByteD, uchar UsedPorts);
int __stdcall DoGetOutDataPorts(uchar * DataOutByteB, uchar * DataOutByteC, uchar * DataOutByteD, uchar * UsedPorts);
int __stdcall DoGetInDataPorts(uchar * DataInByteB, uchar * DataInByteC, uchar * DataInByteD, uchar * UsedPorts);

int __stdcall DoEEPROMRead(ushort Address, uchar * DataInByte);
int __stdcall DoEEPROMWrite(ushort Address, uchar DataOutByte);
int __stdcall DoRS232Send(uchar DataOutByte);
int __stdcall DoRS232Read(uchar * DataInByte);
int __stdcall DoSetRS232Baud(int BaudRate);
int __stdcall DoGetRS232Baud(int * BaudRate);
int __stdcall DoGetRS232Buffer(uchar * RS232Buffer, int DummyInt, int * RS232BufferLength);
int __stdcall DoRS232BufferSend(uchar * RS232Buffer, int DummyInt, int *  RS232BufferLength);
int __stdcall DoSetRS232DataBits(uchar DataBits);
int __stdcall DoGetRS232DataBits(uchar * DataBits);
int __stdcall DoSetRS232Parity(uchar Parity);
int __stdcall DoGetRS232Parity(uchar * Parity);
int __stdcall DoSetRS232StopBits(uchar StopBits);
int __stdcall DoGetRS232StopBits(uchar * StopBits);
 * @author baioraz
 *
 */

public class AvrUsbUartWrapper {
	
    public interface Avr309 extends Library {
    	
    	Avr309 INSTANCE = (Avr309) Native.loadLibrary(("AVR309"),Avr309.class);
    
//    	int NO_ERROR;
//    	int DEVICE_NOT_PRESENT;
//    	int NO_DATA_AVAILABLE;
//    	int INVALID_BAUDRATE;
//    	int OVERRUN_ERROR;
//    	int INVALID_DATABITS;
//    	int INVALID_PARITY;
//    	int INVALID_STOPBITS;

    	//These are useless because single byte functions are working very well
    	int DoRS232BufferSend(byte[] buffer, int length);
    	int DoGetRS232Buffer(PointerByReference buffer, IntByReference length);

    	int DoRS232Send(int data);
    	int DoRS232Read(IntByReference data);
    	
//NOT AVAILABLE WITH ATTINY2313   	
//    	int DoGetRS232Baud(IntByReference baud);
//    	int DoSetRS232Baud(int baudRate);
//    	int DoGetRS232DataBits(ByteByReference dataBits);
//    	int DoSetRS232DataBits(byte dataBits);
//    	int DoGetRS232Parity(ByteByReference parity);
//    	int DoSetRS232Parity(byte parity);
//    	int DoGetRS232StopBits(ByteByReference stopBits);
//    	int DoSetRS232StopBits(byte stopBits);
    }
    
    public static int sendUnsignedByteToUart(int dataByte){
    	return Avr309.INSTANCE.DoRS232Send(dataByte);
    }
    
    public static UartDataBean getUnsignedByteFromUart(int dataByte){
    	
    	UartDataBean dataBean = new UartDataBean();    	
    	IntByReference ibr = new IntByReference();
    	dataBean.setStatus(Avr309.INSTANCE.DoRS232Read(ibr));
    	dataBean.setData(ibr.getValue());
    	return dataBean;
    	
    }
	public static void main(String[] args) {
		
		Avr309 avr= Avr309.INSTANCE;

		int[] RS232Buffer = new int[] {
				0x00,0x00,0x00,0x00,0x00,0x00,   // space
				0x00,0x00,0x00,0x00,0x00,0x00,   // space
				0x00,0x00,0x00,0x00,0x00,0x00,   // space
				0x00,0x00,0x00,0x00,0x00,0x00,   // space
				0x00,0x00,0x00,0x00,0x00,0x00,   // space
				0x00,0x00,0x00,0x00,0x00,0x00,   // space
				0x00,0x00,0x00,0x00,0x00,0x00,   // space
				0x00,0x00,0x00,0x00,0x00,0x00,   // space
				0x00,0x00,0x00,0x00,0x00,0x00,   // space
				0x00,0x00,0x00,0x00,0x00,0x00,   // space
				0x00,0x00,0x00,0x00,0x00,0x00,   // space
				0x00,0x00,0x00,0x00,0x00,0x00,   // space
				0x00,0x00,0x00,0x00,0x00,0x00,   // space
				0x00,0x00,0x00,0x00,0x00,0x00,   // space
				0x00,0x00,0x00,0x00,0x00,0x00,   // space
				0x00,0x00,0x00,0x00,0x00,0x00,   // space
				0x00,0x00,0x00,0x00,0x00,0x00,   // space
				0xfe,0x02,0x02,0x02,0x02,0x00,   // L
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0xfe,0x82,0x82,0x44,0x38,0x00,   // D
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0xfe,0x82,0x82,0x44,0x38,0x00,   // D
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0xfe,0x02,0x02,0x02,0x02,0x00,   // L
				0xfe,0x02,0x02,0x02,0x02,0x00,   // L
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0xfe,0x82,0x82,0x44,0x38,0x00,   // D
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0xfe,0x82,0x82,0x44,0x38,0x00,   // D
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0xfe,0x02,0x02,0x02,0x02,0x00,   // L
				0xfe,0x02,0x02,0x02,0x02,0x00,   // L
				0x00,0x00,0x00,0x00,0x00,0x00,   // space
				0xfe,0x92,0x92,0x92,0x6c,0x00,   // B
				0xfe,0x02,0x02,0x02,0x02,0x00,   // L
				0xfe,0x92,0x92,0x92,0x82,0x00,   // E
				0x80,0x80,0xfe,0x80,0x80,0x00,   // T
				0x00,0x00,0x00,0x00,0x00,0x00,   // space
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0xfe,0x82,0x82,0x44,0x38,0x00,   // D
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0xfe,0x82,0x82,0x44,0x38,0x00,   // D
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0xfe,0x02,0x02,0x02,0x02,0x00,   // L
				0xfe,0x02,0x02,0x02,0x02,0x00,   // L
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0xfe,0x82,0x82,0x44,0x38,0x00,   // D
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0xfe,0x82,0x82,0x44,0x38,0x00,   // D
				0xfe,0x02,0x02,0x02,0x02,0x00,   // L
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0xfe,0x82,0x82,0x44,0x38,0x00,   // D
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0xfe,0x82,0x82,0x44,0x38,0x00,   // D
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0xfe,0x02,0x02,0x02,0x02,0x00,   // L
				0xfe,0x02,0x02,0x02,0x02,0x00,   // L
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0xfe,0x82,0x82,0x44,0x38,0x00,   // D
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0xfe,0x82,0x82,0x44,0x38,0x00,   // D
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0xfe,0x02,0x02,0x02,0x02,0x00,   // L
				0xfe,0x02,0x02,0x02,0x02,0x00,   // L
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0xfe,0x82,0x82,0x44,0x38,0x00,   // D
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0xfe,0x82,0x82,0x44,0x38,0x00,   // D
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0xfe,0x02,0x02,0x02,0x02,0x00,   // L
				0xfe,0x02,0x02,0x02,0x02,0x00,   // L
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0xfe,0x82,0x82,0x44,0x38,0x00,   // D
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0xfe,0x82,0x82,0x44,0x38,0x00,   // D
				0xfe,0x02,0x02,0x02,0x02,0x00,   // L
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0xfe,0x82,0x82,0x44,0x38,0x00,   // D
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0xfe,0x82,0x82,0x44,0x38,0x00,   // D
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0xfe,0x02,0x02,0x02,0x02,0x00,   // L
				0xfe,0x02,0x02,0x02,0x02,0x00,   // L
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0xfe,0x82,0x82,0x44,0x38,0x00,   // D
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0xfe,0x82,0x82,0x44,0x38,0x00,   // D
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0xfe,0x02,0x02,0x02,0x02,0x00,   // L
				0xfe,0x02,0x02,0x02,0x02,0x00,   // L
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0xfe,0x82,0x82,0x44,0x38,0x00,   // D
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0xfe,0x82,0x82,0x44,0x38,0x00,   // D
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0xfe,0x02,0x02,0x02,0x02,0x00,   // L
				0xfe,0x02,0x02,0x02,0x02,0x00,   // L
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0xfe,0x82,0x82,0x44,0x38,0x00,   // D
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0xfe,0x82,0x82,0x44,0x38,0x00,   // D
				0xfe,0x02,0x02,0x02,0x02,0x00,   // L
				0xfe,0x02,0x02,0x02,0x02,0x00,   // L
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0xfe,0x82,0x82,0x44,0x38,0x00,   // D
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0xfe,0x82,0x82,0x44,0x38,0x00,   // D
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0xfe,0x02,0x02,0x02,0x02,0x00,   // L
				0xfe,0x02,0x02,0x02,0x02,0x00,   // L
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0xfe,0x82,0x82,0x44,0x38,0x00,   // D
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0xfe,0x82,0x82,0x44,0x38,0x00,   // D
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0xfe,0x02,0x02,0x02,0x02,0x00,   // L
				0xfe,0x02,0x02,0x02,0x02,0x00,   // L
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0xfe,0x82,0x82,0x44,0x38,0x00,   // D
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0xfe,0x82,0x82,0x44,0x38,0x00,   // D
				0xfe,0x02,0x02,0x02,0x02,0x00,   // L
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0xfe,0x82,0x82,0x44,0x38,0x00,   // D
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0xfe,0x82,0x82,0x44,0x38,0x00,   // D
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0xfe,0x02,0x02,0x02,0x02,0x00,   // L
				0xfe,0x02,0x02,0x02,0x02,0x00,   // L
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0xfe,0x82,0x82,0x44,0x38,0x00,   // D
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0xfe,0x82,0x82,0x44,0x38,0x00,   // D
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0xfe,0x02,0x02,0x02,0x02,0x00,   // L
				0xfe,0x02,0x02,0x02,0x02,0x00,   // L
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0xfe,0x82,0x82,0x44,0x38,0x00,   // D
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0xfe,0x82,0x82,0x44,0x38,0x00,   // D
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0xfe,0x02,0x02,0x02,0x02,0x00,   // L
				0xfe,0x02,0x02,0x02,0x02,0x00,   // L
				0x7e,0x88,0x88,0x88,0x7e,0x00,   // A
				0x00,0x00,0x00,0x00,0x00,0x00,   // space
				0x00,0x00,0x00,0x00,0x00,0x00,   // space
				0x00,0x00,0x00,0x00,0x00,0x00,   // space
				0x00,0x00,0x00,0x00,0x00,0x00,   // space
				0x00,0x00,0x00,0x00,0x00,0x00,   // space
				0x00,0x00,0x00,0x00,0x00,0x00,   // space
				0x00,0x00,0x00,0x00,0x00,0x00,   // space
				0x00,0x00,0x00,0x00,0x00,0x00,   // space
				0x00,0x00,0x00,0x00,0x00,0x00,   // space
				0x00,0x00,0x00,0x00,0x00,0x00,   // space
				0x00,0x00,0x00,0x00,0x00,0x00,   // space
				0x00,0x00,0x00,0x00,0x00,0x00,   // space
				0x00,0x00,0x00,0x00,0x00,0x00,   // space
				0x00,0x00,0x00,0x00,0x00,0x00,   // space
				0x00,0x00,0x00,0x00,0x00,0x00,   // space
				0x00,0x00,0x00,0x00,0x00,0x00   // space
		};
		IntByReference ibr = new IntByReference();
//		try {
//			avr.DoRS232BufferSend(RS232Buffer, 100);
//		} catch (Exception e) {
//			e.printStackTrace();
//		}
		try{
		//PointerByReference pbr = new PointerByReference();
			for (int i = 0; i < 1024; i++) {
				int ret = avr.DoRS232Send(RS232Buffer[i]);
			}
		}catch (Exception e) {
			e.printStackTrace();
		}
//		byte a = 8;
//		avr.DoSetRS232DataBits(a);	
//		System.out.println(avr.DoSetRS232DataBits((byte)8));
		//avr.DoSetRS232Baud(57600);
		//avr.DoSetRS232StopBits(1);
		//avr.DoSetRS232Parity(1);
		
		
		
		
//		ibr = new IntByReference();
//		int ret  = avr.DoGetRS232Baud(ibr);	
//		System.out.println(ibr.getValue());
//		
//		ByteByReference bbr = new ByteByReference();
//		ret  = avr.DoGetRS232DataBits(bbr);	
//		System.out.println(bbr.getValue());
//		
//		bbr = new ByteByReference();
//		ret = avr.DoGetRS232Parity(bbr);	
//		System.out.println(bbr.getValue());
//		
//		bbr = new ByteByReference();
//		ret  = avr.DoGetRS232StopBits(bbr);
//		System.out.println(bbr.getValue());
	}

}
